// app/api/goals/[id]/route.ts
import { NextRequest, NextResponse } from 'next/server';
import connectMongo from '../../../../utils/db';
import {GoalModel} from '../../../../models/Goal';
import mongoose from 'mongoose';


export interface Goal {
    _id?: string; // Optional because it's generated by MongoDB
    userId: string;
    title: string;
    description: string;
    startDate: string;
    endDate: string;
  }

export async function PUT(req: NextRequest, { params }: { params: { id: string } }) {
  try {
    await connectMongo();
    const userId = req.headers.get('x-user-id');
     if (Array.isArray(userId)) {
        return NextResponse.json({ message: 'Bad Request: Multiple User IDs.' }, {status: 400});
    }

    if (!userId) {
      return NextResponse.json({ message: 'Unauthorized: User ID missing.' }, { status: 401 });
    }

    const { id } = params;
    if (!mongoose.Types.ObjectId.isValid(id)) {
        return NextResponse.json({ message: 'Invalid goal ID.' }, { status: 400 });
    }


    const updatedGoalData: Partial<Goal> = await req.json(); // Allow partial updates

     // Ensure the user updating the goal is the owner
      if(updatedGoalData.userId !== userId){
        return NextResponse.json({message: "Forbidden: User ID mismatch."}, {status: 403})
      }

    const updatedGoal = await GoalModel.findOneAndUpdate(
      { _id: id, userId: userId }, // Ensure user owns the goal
      updatedGoalData,
      { new: true } // Return the updated document
    );

    if (!updatedGoal) {
      return NextResponse.json({ message: 'Goal not found or you do not have permission to update it.' }, { status: 404 });
    }

    return NextResponse.json(updatedGoal);
  } catch (error) {
    console.error("Error updating goal:", error);
    return NextResponse.json({ message: 'Failed to update goal.' }, { status: 500 });
  }
}

export async function DELETE(req: NextRequest, { params }: { params: { id: string } }) {
  try {
    await connectMongo();
    const userId = req.headers.get('x-user-id');
    if (Array.isArray(userId)) {
        return NextResponse.json({ message: 'Bad Request: Multiple User IDs.' }, {status: 400});
    }

    if (!userId) {
      return NextResponse.json({ message: 'Unauthorized: User ID missing.' }, { status: 401 });
    }

    const { id } = params;
    if (!mongoose.Types.ObjectId.isValid(id)) {
        return NextResponse.json({ message: 'Invalid goal ID.' }, { status: 400 });
    }

    const deletedGoal = await GoalModel.findOneAndDelete({ _id: id, userId: userId }); // Ensure user owns

    if (!deletedGoal) {
      return NextResponse.json({ message: 'Goal not found or you do not have permission to delete it.' }, { status: 404 });
    }

    return NextResponse.json({ message: 'Goal deleted successfully.' });
  } catch (error) {
    console.error("Error deleting goal:", error);
    return NextResponse.json({ message: 'Failed to delete goal.' }, { status: 500 });
  }
}