// app/api/goals/route.ts
import { NextRequest, NextResponse } from 'next/server';
import connectMongo from '@/utils/db'; // Import your connectMongo function
import {GoalModel} from '../../../models/Goal';


export interface Goal {
    _id?: string; // Optional because it's generated by MongoDB
    userId: string;
    title: string;
    description: string;
    startDate: string;
    endDate: string;
  }


export async function GET(req: NextRequest) {
  try {
    await connectMongo();
    const userId = req.headers.get('x-user-id');

    if (!userId) {
      return NextResponse.json({ message: 'Unauthorized: User ID missing.' }, { status: 401 });
    }
     if (Array.isArray(userId)) {
        return NextResponse.json({ message: 'Bad Request: Multiple User IDs.' }, {status: 400});
    }

    const goals = await GoalModel.find({ userId: userId }).exec();
    return NextResponse.json(goals);
  } catch (error) {
    console.error("Error fetching goals:", error);
    return NextResponse.json({ message: 'Failed to fetch goals.' }, { status: 500 });
  }
}

export async function POST(req: NextRequest) {
  try {
    await connectMongo();
    const userId = req.headers.get('x-user-id');
     if (Array.isArray(userId)) {
        return NextResponse.json({ message: 'Bad Request: Multiple User IDs.' }, {status: 400});
    }

    if (!userId) {
      return NextResponse.json({ message: 'Unauthorized: User ID missing.' }, { status: 401 });
    }

    const newGoalData: Goal = await req.json(); // Type check with your Goal interface

    // Validate that userId in the body matches the header (or just use the header)
    if (newGoalData.userId !== userId) {
      return NextResponse.json({ message: 'Forbidden: User ID mismatch.' }, { status: 403 });
    }

    const newGoal = new GoalModel(newGoalData);
    const savedGoal = await newGoal.save();

    return NextResponse.json(savedGoal, { status: 201 });
  } catch (error) {
    console.error("Error adding goal:", error);
    return NextResponse.json({ message: 'Failed to add goal.' }, { status: 500 });
  }
}